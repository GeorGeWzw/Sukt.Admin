// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sukt.Core.EntityFrameworkCore;

#nullable disable

namespace Sukt.Core.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(SuktContext))]
    [Migration("20211207142927_sukt_default_v1")]
    partial class sukt_default_v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Sukt.Core.Domain.Models.Authority.RoleMenuEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("char(36)")
                        .HasColumnName("menu_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("role_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_role_menu");

                    b.ToTable("RoleMenu", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ApiResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("AllowedAccessTokenSigningAlgorithms")
                        .HasColumnType("longtext")
                        .HasColumnName("allowed_access_token_signing_algorithms");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("display_name");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("enabled");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime")
                        .HasColumnName("last_accessed");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("non_editable");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("show_in_discovery_document");

                    b.HasKey("Id")
                        .HasName("pk_api_resource");

                    b.ToTable("ApiResource", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ApiResourceClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("ApiResourceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("api_resource_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Type")
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_api_resource_claim");

                    b.HasIndex("ApiResourceId")
                        .HasDatabaseName("ix_api_resource_claim_api_resource_id");

                    b.ToTable("ApiResourceClaim", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ApiResourceProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("ApiResourceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("api_resource_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Key")
                        .HasColumnType("longtext")
                        .HasColumnName("key");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_api_resource_property");

                    b.HasIndex("ApiResourceId")
                        .HasDatabaseName("ix_api_resource_property_api_resource_id");

                    b.ToTable("ApiResourceProperty", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ApiResourceScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("ApiResourceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("api_resource_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Scope")
                        .HasColumnType("longtext")
                        .HasColumnName("scope");

                    b.HasKey("Id")
                        .HasName("pk_api_resource_scope");

                    b.HasIndex("ApiResourceId")
                        .HasDatabaseName("ix_api_resource_scope_api_resource_id");

                    b.ToTable("ApiResourceScope", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ApiResourceSecret", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("ApiResourceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("api_resource_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime")
                        .HasColumnName("expiration");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Type")
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_api_resource_secret");

                    b.HasIndex("ApiResourceId")
                        .HasDatabaseName("ix_api_resource_secret_api_resource_id");

                    b.ToTable("ApiResourceSecret", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ApiScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("display_name");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("emphasize");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("enabled");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<bool>("Required")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("required");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("show_in_discovery_document");

                    b.HasKey("Id")
                        .HasName("pk_api_scope");

                    b.ToTable("ApiScope", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ApiScopeClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<Guid?>("ScopeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("scope_id");

                    b.Property<string>("Type")
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_api_scope_claim");

                    b.HasIndex("ScopeId")
                        .HasDatabaseName("ix_api_scope_claim_scope_id");

                    b.ToTable("ApiScopeClaim", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ApiScopeProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Key")
                        .HasColumnType("longtext")
                        .HasColumnName("key");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<Guid?>("ScopeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("scope_id");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_api_scope_property");

                    b.HasIndex("ScopeId")
                        .HasDatabaseName("ix_api_scope_property_scope_id");

                    b.ToTable("ApiScopeProperty", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<int>("AbsoluteRefreshTokenLifetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2592000)
                        .HasColumnName("absolute_refresh_token_lifetime");

                    b.Property<int>("AccessTokenLifetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3600)
                        .HasColumnName("access_token_lifetime");

                    b.Property<int>("AccessTokenType")
                        .HasColumnType("int")
                        .HasColumnName("access_token_type");

                    b.Property<bool>("AllowAccessTokensViaBrowser")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allow_access_tokens_via_browser");

                    b.Property<bool>("AllowOfflineAccess")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allow_offline_access");

                    b.Property<bool>("AllowPlainTextPkce")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allow_plain_text_pkce");

                    b.Property<bool>("AllowRememberConsent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("allow_remember_consent");

                    b.Property<string>("AllowedIdentityTokenSigningAlgorithms")
                        .HasColumnType("longtext")
                        .HasColumnName("allowed_identity_token_signing_algorithms");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("always_include_user_claims_in_id_token");

                    b.Property<bool>("AlwaysSendClientClaims")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("always_send_client_claims");

                    b.Property<int>("AuthorizationCodeLifetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(300)
                        .HasColumnName("authorization_code_lifetime");

                    b.Property<bool>("BackChannelLogoutSessionRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("back_channel_logout_session_required");

                    b.Property<string>("BackChannelLogoutUri")
                        .HasColumnType("longtext")
                        .HasColumnName("back_channel_logout_uri");

                    b.Property<string>("ClientClaimsPrefix")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("client_")
                        .HasColumnName("client_claims_prefix");

                    b.Property<string>("ClientId")
                        .HasColumnType("longtext")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientName")
                        .HasColumnType("longtext")
                        .HasColumnName("client_name");

                    b.Property<string>("ClientUri")
                        .HasColumnType("longtext")
                        .HasColumnName("client_uri");

                    b.Property<int?>("ConsentLifetime")
                        .HasColumnType("int")
                        .HasColumnName("consent_lifetime");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("DeviceCodeLifetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(300)
                        .HasColumnName("device_code_lifetime");

                    b.Property<bool>("EnableLocalLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("enable_local_login");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("enabled");

                    b.Property<bool>("FrontChannelLogoutSessionRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("front_channel_logout_session_required");

                    b.Property<string>("FrontChannelLogoutUri")
                        .HasColumnType("longtext")
                        .HasColumnName("front_channel_logout_uri");

                    b.Property<int>("IdentityTokenLifetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(300)
                        .HasColumnName("identity_token_lifetime");

                    b.Property<bool>("IncludeJwtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("include_jwt_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime")
                        .HasColumnName("last_accessed");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("LogoUri")
                        .HasColumnType("longtext")
                        .HasColumnName("logo_uri");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("non_editable");

                    b.Property<string>("PairWiseSubjectSalt")
                        .HasColumnType("longtext")
                        .HasColumnName("pair_wise_subject_salt");

                    b.Property<string>("ProtocolType")
                        .HasColumnType("longtext")
                        .HasColumnName("protocol_type");

                    b.Property<int>("RefreshTokenExpiration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1)
                        .HasColumnName("refresh_token_expiration");

                    b.Property<int>("RefreshTokenUsage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1)
                        .HasColumnName("refresh_token_usage");

                    b.Property<bool>("RequireClientSecret")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("require_client_secret");

                    b.Property<bool>("RequireConsent")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("require_consent");

                    b.Property<bool>("RequirePkce")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("require_pkce");

                    b.Property<bool>("RequireRequestObject")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("require_request_object");

                    b.Property<int>("SlidingRefreshTokenLifetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2592000)
                        .HasColumnName("sliding_refresh_token_lifetime");

                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("update_access_token_claims_on_refresh");

                    b.Property<string>("UserCodeType")
                        .HasColumnType("longtext")
                        .HasColumnName("user_code_type");

                    b.Property<int?>("UserSsoLifetime")
                        .HasColumnType("int")
                        .HasColumnName("user_sso_lifetime");

                    b.HasKey("Id")
                        .HasName("pk_client");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ClientClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("char(36)")
                        .HasColumnName("client_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Type")
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_client_claim");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_claim_client_id");

                    b.ToTable("ClientClaim", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ClientCorsOrigin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("char(36)")
                        .HasColumnName("client_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Origin")
                        .HasColumnType("longtext")
                        .HasColumnName("origin");

                    b.HasKey("Id")
                        .HasName("pk_client_cors_origin");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_cors_origin_client_id");

                    b.ToTable("ClientCorsOrigin", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ClientGrantType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("char(36)")
                        .HasColumnName("client_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<string>("GrantType")
                        .HasColumnType("longtext")
                        .HasColumnName("grant_type");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.HasKey("Id")
                        .HasName("pk_client_grant_type");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_grant_type_client_id");

                    b.ToTable("ClientGrantType", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ClientIdPRestriction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("char(36)")
                        .HasColumnName("client_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Provider")
                        .HasColumnType("longtext")
                        .HasColumnName("provider");

                    b.HasKey("Id")
                        .HasName("pk_client_id_p_restriction");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_id_p_restriction_client_id");

                    b.ToTable("ClientIdPRestriction", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ClientPostLogoutRedirectUri", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("char(36)")
                        .HasColumnName("client_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("PostLogoutRedirectUri")
                        .HasColumnType("longtext")
                        .HasColumnName("post_logout_redirect_uri");

                    b.HasKey("Id")
                        .HasName("pk_client_post_logout_redirect_uri");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_post_logout_redirect_uri_client_id");

                    b.ToTable("ClientPostLogoutRedirectUri", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ClientProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("char(36)")
                        .HasColumnName("client_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Key")
                        .HasColumnType("longtext")
                        .HasColumnName("key");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_client_property");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_property_client_id");

                    b.ToTable("ClientProperty", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ClientRedirectUri", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("char(36)")
                        .HasColumnName("client_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("RedirectUri")
                        .HasColumnType("longtext")
                        .HasColumnName("redirect_uri");

                    b.HasKey("Id")
                        .HasName("pk_client_redirect_uri");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_redirect_uri_client_id");

                    b.ToTable("ClientRedirectUri", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ClientScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("char(36)")
                        .HasColumnName("client_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Scope")
                        .HasColumnType("longtext")
                        .HasColumnName("scope");

                    b.HasKey("Id")
                        .HasName("pk_client_scope");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_scope_client_id");

                    b.ToTable("ClientScope", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ClientSecret", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("char(36)")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime")
                        .HasColumnName("expiration");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Type")
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_client_secret");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_secret_client_id");

                    b.ToTable("ClientSecret", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.DeviceFlowCodes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("ClientId")
                        .HasColumnType("longtext")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("consumed_time");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<string>("Data")
                        .HasColumnType("longtext")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("DeviceCode")
                        .HasColumnType("longtext")
                        .HasColumnName("device_code");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime")
                        .HasColumnName("expiration");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("SessionId")
                        .HasColumnType("longtext")
                        .HasColumnName("session_id");

                    b.Property<string>("SubjectId")
                        .HasColumnType("longtext")
                        .HasColumnName("subject_id");

                    b.Property<string>("UserCode")
                        .HasColumnType("longtext")
                        .HasColumnName("user_code");

                    b.HasKey("Id")
                        .HasName("pk_device_flow_codes");

                    b.ToTable("DeviceFlowCodes", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.IdentityResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("display_name");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("emphasize");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("enabled");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("non_editable");

                    b.Property<bool>("Required")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("required");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("show_in_discovery_document");

                    b.HasKey("Id")
                        .HasName("pk_identity_resource");

                    b.ToTable("IdentityResource", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.IdentityResourceClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<Guid?>("IdentityResourceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("identity_resource_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Type")
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_identity_resource_claim");

                    b.HasIndex("IdentityResourceId")
                        .HasDatabaseName("ix_identity_resource_claim_identity_resource_id");

                    b.ToTable("IdentityResourceClaim", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.IdentityResourceProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<Guid?>("IdentityResourceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("identity_resource_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Key")
                        .HasColumnType("longtext")
                        .HasColumnName("key");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_identity_resource_property");

                    b.HasIndex("IdentityResourceId")
                        .HasDatabaseName("ix_identity_resource_property_identity_resource_id");

                    b.ToTable("IdentityResourceProperty", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.PersistedGrant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("ClientId")
                        .HasColumnType("longtext")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("consumed_time");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<string>("Data")
                        .HasColumnType("longtext")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime")
                        .HasColumnName("expiration");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Key")
                        .HasColumnType("longtext")
                        .HasColumnName("key");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("SessionId")
                        .HasColumnType("longtext")
                        .HasColumnName("session_id");

                    b.Property<string>("SubjectId")
                        .HasColumnType("longtext")
                        .HasColumnName("subject_id");

                    b.Property<string>("Type")
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_persisted_grant");

                    b.ToTable("PersistedGrant", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.Menu.FunctionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_enabled");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("LinkUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("link_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_function");

                    b.ToTable("Function", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.Menu.MenuEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("ButtonClick")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("button_click");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("component");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("component_name");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("icon");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsShow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("is_show");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("MicroName")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("micro_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("parent_id");

                    b.Property<string>("ParentNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("parent_number");

                    b.Property<string>("Path")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("path");

                    b.Property<int>("Sort")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("sort");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_menu");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.MenuFunctionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<Guid>("FunctionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("function_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("char(36)")
                        .HasColumnName("menu_id");

                    b.HasKey("Id")
                        .HasName("pk_menu_function");

                    b.ToTable("MenuFunction", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.Organization.OrganizationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<int>("Depth")
                        .HasColumnType("int")
                        .HasColumnName("depth");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid?>("FirstLeader")
                        .HasColumnType("char(36)")
                        .HasColumnName("first_leader");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("parent_id");

                    b.Property<string>("ParentNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("parent_number");

                    b.Property<Guid?>("SecondLeader")
                        .HasColumnType("char(36)")
                        .HasColumnName("second_leader");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_organization");

                    b.ToTable("Organization", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.Organization.OrganizationUserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("organization_id");

                    b.Property<string>("OrganizationNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("organization_number");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("position_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_organization_user");

                    b.ToTable("OrganizationUser", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.RoleClaimEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("claim_value");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claim");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_admin");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("normalized_name");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.SuktApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<int>("AccessTokenExpire")
                        .HasColumnType("int")
                        .HasColumnName("access_token_expire");

                    b.Property<string>("ClientGrantType")
                        .HasColumnType("longtext")
                        .HasColumnName("client_grant_type");

                    b.Property<string>("ClientId")
                        .HasColumnType("longtext")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientName")
                        .HasColumnType("longtext")
                        .HasColumnName("client_name");

                    b.Property<string>("ClientScopes")
                        .HasColumnType("longtext")
                        .HasColumnName("client_scopes");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("longtext")
                        .HasColumnName("client_secret");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("longtext")
                        .HasColumnName("post_logout_redirect_uris");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext")
                        .HasColumnName("properties");

                    b.Property<string>("ProtocolType")
                        .HasColumnType("longtext")
                        .HasColumnName("protocol_type");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("longtext")
                        .HasColumnName("redirect_uris");

                    b.Property<string>("SecretType")
                        .HasColumnType("longtext")
                        .HasColumnName("secret_type");

                    b.HasKey("Id")
                        .HasName("pk_sukt_applications");

                    b.ToTable("SuktApplications", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.SuktResourceScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyToken")
                        .HasColumnType("longtext")
                        .HasColumnName("concurrency_token");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("display_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext")
                        .HasColumnName("properties");

                    b.Property<string>("Resources")
                        .HasColumnType("longtext")
                        .HasColumnName("resources");

                    b.HasKey("Id")
                        .HasName("pk_sukt_resource_scopes");

                    b.ToTable("SuktResourceScopes", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.SystemFoundation.DataDictionary.DataDictionaryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("parent_id");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext")
                        .HasColumnName("remark");

                    b.Property<int>("Sort")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("sort");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("Value")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_data_dictionary");

                    b.ToTable("DataDictionary", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.Tenant.MultiTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext")
                        .HasColumnName("company_name");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_enable");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("LinkMan")
                        .HasColumnType("longtext")
                        .HasColumnName("link_man");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("pk_multi_tenants");

                    b.ToTable("MultiTenants", (string)null);

                    b.HasComment("租户信息表");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.Tenant.MultiTenantConnectionString", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"))
                        .HasColumnName("tenant_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_multi_tenant_connection_strings");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_multi_tenant_connection_strings_tenant_id");

                    b.ToTable("MultiTenantConnectionStrings", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("access_failed_count");

                    b.Property<DateTimeOffset>("Birthday")
                        .HasColumnType("datetime")
                        .HasColumnName("birthday");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<string>("Department")
                        .HasColumnType("longtext")
                        .HasColumnName("department");

                    b.Property<string>("Duties")
                        .HasColumnType("longtext")
                        .HasColumnName("duties");

                    b.Property<string>("Education")
                        .HasColumnType("longtext")
                        .HasColumnName("education");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("HeadImg")
                        .HasColumnType("longtext")
                        .HasColumnName("head_img");

                    b.Property<string>("IdCard")
                        .HasColumnType("longtext")
                        .HasColumnName("id_card");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_enable");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_system");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NickName")
                        .HasColumnType("longtext")
                        .HasColumnName("nick_name");

                    b.Property<string>("NormalizeEmail")
                        .HasColumnType("longtext")
                        .HasColumnName("normalize_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("security_stamp");

                    b.Property<string>("Sex")
                        .HasColumnType("longtext")
                        .HasColumnName("sex");

                    b.Property<string>("TechnicalLevel")
                        .HasColumnType("longtext")
                        .HasColumnName("technical_level");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_name");

                    b.Property<int>("UserType")
                        .HasColumnType("int")
                        .HasColumnName("user_type");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.UserClaimEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claim");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.UserRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("role_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_role");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.UserTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("created_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTimeOffset?>("LastModifedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_modifed_at");

                    b.Property<Guid?>("LastModifyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("last_modify_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_user_token");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ApiResourceClaim", b =>
                {
                    b.HasOne("Sukt.Core.Domain.Models.IdentityServerFour.ApiResource", "ApiResource")
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiResourceId")
                        .HasConstraintName("fk_api_resource_claim_api_resource_api_resource_id");

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ApiResourceProperty", b =>
                {
                    b.HasOne("Sukt.Core.Domain.Models.IdentityServerFour.ApiResource", "ApiResource")
                        .WithMany("Properties")
                        .HasForeignKey("ApiResourceId")
                        .HasConstraintName("fk_api_resource_property_api_resource_api_resource_id");

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ApiResourceScope", b =>
                {
                    b.HasOne("Sukt.Core.Domain.Models.IdentityServerFour.ApiResource", "ApiResource")
                        .WithMany("Scopes")
                        .HasForeignKey("ApiResourceId")
                        .HasConstraintName("fk_api_resource_scope_api_resource_api_resource_id");

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ApiResourceSecret", b =>
                {
                    b.HasOne("Sukt.Core.Domain.Models.IdentityServerFour.ApiResource", "ApiResource")
                        .WithMany("Secrets")
                        .HasForeignKey("ApiResourceId")
                        .HasConstraintName("fk_api_resource_secret_api_resource_api_resource_id");

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ApiScopeClaim", b =>
                {
                    b.HasOne("Sukt.Core.Domain.Models.IdentityServerFour.ApiScope", "Scope")
                        .WithMany("UserClaims")
                        .HasForeignKey("ScopeId")
                        .HasConstraintName("fk_api_scope_claim_api_scope_scope_id");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ApiScopeProperty", b =>
                {
                    b.HasOne("Sukt.Core.Domain.Models.IdentityServerFour.ApiScope", "Scope")
                        .WithMany("Properties")
                        .HasForeignKey("ScopeId")
                        .HasConstraintName("fk_api_scope_property_api_scope_scope_id");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ClientClaim", b =>
                {
                    b.HasOne("Sukt.Core.Domain.Models.IdentityServerFour.Client", "Client")
                        .WithMany("Claims")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_client_claim_client_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ClientCorsOrigin", b =>
                {
                    b.HasOne("Sukt.Core.Domain.Models.IdentityServerFour.Client", "Client")
                        .WithMany("AllowedCorsOrigins")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_client_cors_origin_client_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ClientGrantType", b =>
                {
                    b.HasOne("Sukt.Core.Domain.Models.IdentityServerFour.Client", "Client")
                        .WithMany("AllowedGrantTypes")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_client_grant_type_client_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ClientIdPRestriction", b =>
                {
                    b.HasOne("Sukt.Core.Domain.Models.IdentityServerFour.Client", "Client")
                        .WithMany("IdentityProviderRestrictions")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_client_id_p_restriction_client_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ClientPostLogoutRedirectUri", b =>
                {
                    b.HasOne("Sukt.Core.Domain.Models.IdentityServerFour.Client", "Client")
                        .WithMany("PostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_client_post_logout_redirect_uri_client_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ClientProperty", b =>
                {
                    b.HasOne("Sukt.Core.Domain.Models.IdentityServerFour.Client", "Client")
                        .WithMany("Properties")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_client_property_client_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ClientRedirectUri", b =>
                {
                    b.HasOne("Sukt.Core.Domain.Models.IdentityServerFour.Client", "Client")
                        .WithMany("RedirectUris")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_client_redirect_uri_client_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ClientScope", b =>
                {
                    b.HasOne("Sukt.Core.Domain.Models.IdentityServerFour.Client", "Client")
                        .WithMany("AllowedScopes")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_client_scope_client_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ClientSecret", b =>
                {
                    b.HasOne("Sukt.Core.Domain.Models.IdentityServerFour.Client", "Client")
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_client_secret_client_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.IdentityResourceClaim", b =>
                {
                    b.HasOne("Sukt.Core.Domain.Models.IdentityServerFour.IdentityResource", "IdentityResource")
                        .WithMany("UserClaims")
                        .HasForeignKey("IdentityResourceId")
                        .HasConstraintName("fk_identity_resource_claim_identity_resource_identity_resource_id");

                    b.Navigation("IdentityResource");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.IdentityResourceProperty", b =>
                {
                    b.HasOne("Sukt.Core.Domain.Models.IdentityServerFour.IdentityResource", "IdentityResource")
                        .WithMany("Properties")
                        .HasForeignKey("IdentityResourceId")
                        .HasConstraintName("fk_identity_resource_property_identity_resource_identity_resource_");

                    b.Navigation("IdentityResource");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.Tenant.MultiTenantConnectionString", b =>
                {
                    b.HasOne("Sukt.Core.Domain.Models.Tenant.MultiTenant", null)
                        .WithMany("TenantConntionStrings")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_multi_tenant_connection_strings_multi_tenants_tenant_id");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ApiResource", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("Scopes");

                    b.Navigation("Secrets");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.ApiScope", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.Client", b =>
                {
                    b.Navigation("AllowedCorsOrigins");

                    b.Navigation("AllowedGrantTypes");

                    b.Navigation("AllowedScopes");

                    b.Navigation("Claims");

                    b.Navigation("ClientSecrets");

                    b.Navigation("IdentityProviderRestrictions");

                    b.Navigation("PostLogoutRedirectUris");

                    b.Navigation("Properties");

                    b.Navigation("RedirectUris");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.IdentityServerFour.IdentityResource", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("Sukt.Core.Domain.Models.Tenant.MultiTenant", b =>
                {
                    b.Navigation("TenantConntionStrings");
                });
#pragma warning restore 612, 618
        }
    }
}
